///////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2017 The 8-Bit Bunch. Licensed under the Apache License, Version 1.1
// (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-1.1>.
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
// ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
//////////////////f/////////////////////////////////////////////////////////////////////////////////

include "gamelib.plh"
include "playtype.plh"
include "globalDefs.plh"
include "party.plh"
include "gen_modules.plh"
include "gen_items.plh"

// 9 rows per text line, minus 4 lines for header/footer
const PAGE_SIZE = (BIGWIN_HEIGHT / 9) - 4

const STATS_COL_1 = 45
const STATS_COL_2 = 140

// Exported functions go here. First a predef for each one, then a table with function pointers
// in the same order as the constants are defined in the header.
predef _buyFromStore(storeCode, profitPercent)#1
predef _sellToStore(profitPercent)#1
word[] funcTbl = @_buyFromStore, @_sellToStore

word pItemsModule, pPartyModule
const MAX_PAGE_ITEMS = 20 // should be plenty
word pageItems[MAX_PAGE_ITEMS]
word pagePrices[MAX_PAGE_ITEMS]
word pagePlayers[MAX_PAGE_ITEMS]
word pMatchPlayer

///////////////////////////////////////////////////////////////////////////////////////////////////
// Definitions used by assembly code
asm _defs
!convtab "../../include/hiBitAscii.ct"
!source "../../include/global.i"
!source "../../include/plasma.i"
!source "../../include/mem.i"
tmp         = $2
pTmp        = $4
ysav        = $34
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def loadExtraModules()#0
  mmgr(START_LOAD, 1) // code is in partition 1
  pItemsModule = mmgr(QUEUE_LOAD, MOD_GEN_ITEMS<<8 | RES_TYPE_MODULE)
  pPartyModule = mmgr(QUEUE_LOAD, MOD_PARTY<<8 | RES_TYPE_MODULE)
  mmgr(FINISH_LOAD, 0)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def unloadExtraModules()#0
  mmgr(FREE_MEMORY, pItemsModule)
  mmgr(FREE_MEMORY, pPartyModule)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayBuyTitle(pageNum, nPages)#0
  clearWindow()
  // Can't use centering mode on oversize window - font engine can't handle width > 255
  rawDisplayStr("^Y^I Buying")
  if (nPages > 1)
    rawDisplayf2(" - p. %d/%d", pageNum+1, nPages)
  fin
  rawDisplayStr(" ^N\n^V014^LBrowse^T046Price^T085Item^L")
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayItemLine(num)#0
  rawDisplayf2("\n  %c.^T046%d^T085", num + 'A', pagePrices[num])
  pPartyModule()=>party_displayItemName(pageItems[num])
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayBuyPage(pItemTbl, markupRatio, pageNum, nPages)#1
  byte itemNum
  word pFunc, pItem

  displayBuyTitle(pageNum, nPages)
  mmgr(CHECK_MEM, 0)
  mmgr(HEAP_COLLECT, 0)

  pFunc = pItemTbl + ((pageNum*PAGE_SIZE) << 1)
  for itemNum = 0 to PAGE_SIZE-1
    if !(*pFunc); break; fin
    pItem = (*pFunc)()
    if pItem->t_type == TYPE_FANCY_ITEM
      pItem=>w_count = pItem=>w_storeAmount
    fin
    pageItems[itemNum] = pItem
    pagePrices[itemNum] = max(1, pItem=>w_price + addRatio(pItem=>w_price, markupRatio))
    displayItemLine(itemNum)
    pFunc = pFunc + 2
  next

  rawDisplayf1("\n^V166Gold: %d. Browse [A", global=>w_gold)
  if itemNum > 1; rawDisplayf1("-%c", itemNum-1+'A'); fin
  rawDisplayStr("], ")
  if nPages > 1
    rawDisplayf1("p. [1-%d], ", nPages)
  fin
  rawDisplayStr("or [Esc].")
  return itemNum
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayItemBrowse(pItem1, price, pItem2)#0
  clearWindow()
  rawDisplayf1("^T108^I Browse ^N\n\n^T%D^LMerchandise^L", STATS_COL_1)
  if pItem2
    rawDisplayf2("^T%D^L%s^L", STATS_COL_2, pMatchPlayer=>s_name)
  fin
  pPartyModule()=>party_displayItemStats(pItem1, pItem2)
  rawDisplayf2("\n\nPrice^T%D%d", STATS_COL_1, price)
  rawDisplayf2("\nAvail^T%D%d", STATS_COL_1, global=>w_gold)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def matchEquipped(pMatch, nSkip)#1
  word pPlayer, pItem
  pPlayer = global=>p_players
  pMatchPlayer = pPlayer
  while pPlayer
    pItem = pPlayer=>p_items
    while pItem
      if (pItem->t_type == pMatch->t_type) and (pItem->t_type == TYPE_WEAPON or pItem->t_type == TYPE_ARMOR)
        if (pItem->b_flags & ITEM_FLAG_EQUIP)
          if pItem->t_type <> TYPE_ARMOR or (pItem=>s_itemKind == pMatch=>s_itemKind)
            if nSkip == 0
              pMatchPlayer = pPlayer
              return pItem
            fin
            nSkip = nSkip - 1
          fin
        fin
      fin
      pItem = pItem=>p_nextObj
    loop
    pPlayer = pPlayer=>p_nextObj
  loop
  return NULL
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayItemMenu(price, hasNextComp)#0
  rawDisplayf1("\n\n[Esc]^T%D", STATS_COL_1)
  if price <= global=>w_gold
    rawDisplayStr("B)uy it")
  else
    rawDisplayStr("(too much)")
  fin
  if hasNextComp
    rawDisplayf1("^T%DN)ext compare", STATS_COL_2)
  fin
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def askQuantity(nMax)#1
  word num
  if nMax == 1; return 1; fin
  rawDisplayf1("How many (1-%d)? ", nMax)
  num = parseDec(getStringResponse())
  if num < 0 or num > nMax; return 0; fin
  return num
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def browseItem(num)#0
  word pItem, price, compSkip, pComp, quantity
  byte sel
  pItem = pageItems[num]
  price = pagePrices[num]
  compSkip = 0
  while TRUE
    displayItemBrowse(pItem, price, matchEquipped(pItem, compSkip))
    displayItemMenu(price, compSkip or matchEquipped(pItem, 1+compSkip))
    sel = getUpperKey()
    rawDisplayf1(" %c\n", sel)
    if sel == 'B' and price <= global=>w_gold
      matchEquipped(pItem, compSkip) // to set pMatchPlayer
      pComp = scanForNamedObj(pMatchPlayer=>p_items, pItem=>s_name)
      if pComp
        if pItem->t_type == TYPE_FANCY_ITEM and pItem=>w_count > 0
          pComp=>w_count = min(30000, pComp=>w_count + pItem=>w_count)
        else
          rawDisplayStr("\nDuplicate item.")
          beep()
          pause(1000)
          continue
        fin
      else
        addToList(@pMatchPlayer=>p_items, pItem)
      fin
      global=>w_gold = global=>w_gold - price
      rawDisplayStr("\nPurchase complete.")
      pause(800)
      break
    elsif sel == 'N' and (compSkip or matchEquipped(pItem, 1+compSkip))
      compSkip++
      if !matchEquipped(pItem, compSkip); compSkip = 0; fin
    elsif sel == $1B // Esc
      break
    else
      beep()
    fin
  loop
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _buyFromStore(storeCode, profitPercent)#1
  word pItemTbl, choice, ratio
  byte nItemsOnPage, pageNum, nPages, redisplay

  loadExtraModules()
  pItemTbl = pItemsModule()=>items_forStoreCode(storeCode)

  setBigWindow()

  nPages = (countArray(pItemTbl) + PAGE_SIZE - 1) / PAGE_SIZE
  pageNum = 0

  ratio = percentToRatio(profitPercent) / 2  // half of profit on buying, half on selling

  redisplay = TRUE
  while TRUE
    if redisplay
      nItemsOnPage = displayBuyPage(pItemTbl, ratio, pageNum, nPages)
    fin
    choice = getUpperKey()
    redisplay = TRUE
    if choice >= '1' and (choice-'1') < nPages
      pageNum = choice - '1'
    elsif choice >= 'A' and (choice-'A' < nItemsOnPage)
      browseItem(choice-'A')
    elsif choice == $1B // Esc
      break
    else
      beep()
      redisplay = FALSE
    fin
  loop

  unloadExtraModules()
  mmgr(CHECK_MEM, 0)
  return mmgr(HEAP_COLLECT, 0)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displaySellTitle(pageNum, nPages)#0
  clearWindow()
  // Can't use centering mode on oversize window - font engine can't handle width > 255
  rawDisplayStr("^Y^I Selling")
  if (nPages > 1)
    rawDisplayf2(" - p. %d/%d", pageNum+1, nPages)
  fin
  rawDisplayStr(" ^N\n^V014^LSell^T046Amt.^T085Item^L")
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def iterateSellables(skipItems, markdownRatio)#1
  word pPlayer, pItem, itemsOnPage, totalItems, price
  byte ok
  itemsOnPage = 0
  totalItems = 0
  pPlayer = global=>p_players
  while pPlayer
    pItem = pPlayer=>p_items
    while pItem
      ok = pItem=>w_price > 0
      if pItem->t_type == TYPE_FANCY_ITEM
        ok = pItem=>w_count > 0 // too much trouble to figure out prices of stackables
      elsif pItem->t_type == TYPE_WEAPON or pItem->t_type == TYPE_ARMOR
        if pItem->b_flags & ITEM_FLAG_EQUIP; ok = FALSE; fin
      fin
      if ok
        price = max(0, pItem=>w_price - addRatio(pItem=>w_price, markdownRatio))
        if !price; ok = FALSE; fin
      fin
      if ok
        if totalItems >= skipItems and itemsOnPage < PAGE_SIZE
          pageItems[itemsOnPage] = pItem
          pagePrices[itemsOnPage] = price
          pagePlayers[itemsOnPage] = pPlayer
          displayItemLine(itemsOnPage)
          itemsOnPage++
        fin
        totalItems++
      fin
      pItem = pItem=>p_nextObj
    loop
    pPlayer = pPlayer=>p_nextObj
  loop
  if skipItems == 9999; return totalItems; fin
  return itemsOnPage
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displaySellPage(markdownRatio, pageNum, nPages)#1
  word nItems
  displaySellTitle(pageNum, nPages)
  nItems = iterateSellables(pageNum * PAGE_SIZE, markdownRatio)
  if !nItems
    rawDisplayStr("\n\nNothing to sell here.")
  fin
  rawDisplayf1("\n^V166Gold: %d. Sell [A", global=>w_gold)
  if nItems > 1; rawDisplayf1("-%c", nItems-1+'A'); fin
  rawDisplayStr("], ")
  if nPages > 1
    rawDisplayf1("p. [1-%d], ", nPages)
  fin
  rawDisplayStr("or [Esc].")
  return nItems
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def sellItem(num)#0
  word pItem, price

  pItem = pageItems[num]
  price = pagePrices[num]

  clearWindow()

  global=>w_gold = global=>w_gold + price
  removeFromList(@pagePlayers=>p_items, pItem)

  rawDisplayStr("\nSale complete.")
  pause(800)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _sellToStore(profitPercent)#1
  word pItemTbl, choice, ratio
  byte nItemsOnPage, pageNum, totalItems, nPages, redisplay

  loadExtraModules()
  setBigWindow()

  pageNum = 0

  ratio = percentToRatio(profitPercent) / 2 // half profit on buying, half on selling

  redisplay = TRUE
  while totalItems > 0
    nPages = (totalItems + PAGE_SIZE - 1) / PAGE_SIZE // recalc each time since totalItems changes
    pageNum = min(nPages-1, pageNum)
    if redisplay
      nItemsOnPage = displaySellPage(ratio, pageNum, nPages)
    fin
    choice = getUpperKey()
    redisplay = TRUE
    if choice >= '1' and (choice-'1') < nPages
      pageNum = choice - '1'
    elsif choice >= 'A' and (choice-'A' < nItemsOnPage)
      sellItem(choice-'A')
      totalItems = iterateSellables(9999, 0)
    elsif choice == $1B // Esc
      break
    else
      beep()
      redisplay = FALSE
    fin
  loop

  unloadExtraModules()
  mmgr(CHECK_MEM, 0)
  return mmgr(HEAP_COLLECT, 0)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Boilerplate module initialization code
return @funcTbl
done
