///////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2015 The 8-Bit Bunch. Licensed under the Apache License, Version 1.1
// (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-1.1>.
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
// ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////

// Functions we import from the main game loop. If you find there are some over there that aren't
// yet exported, modify this header then add the mechanics at the top of gameloop.pla.
include "gamelib.plh"

// Data structure definitions
include "playtype.plh"

// Global definitions
include "globalDefs.plh"
include "gen_modules.plh"
include "gen_items.plh"
include "godmode.plh"

// Definition of constants for functions exported by this module
include "party.plh"

// Type groups
const TYPE_ALL   = $0100
const TYPE_EQUIP = $0101
const TYPE_USE   = $0102
const TYPE_DROP  = $0103

// Tab positions
const CHAR_WND_STAT_X = 30
const CHAR_WND_INV_X = 16

// Exported functions go here. First a predef for each one, then a table with function pointers
// in the same order as the constants are defined in the header.
predef _party_doPlayerSheet, _party_benchPlayer, _party_unbenchPlayer
word[] funcTbl = @_party_doPlayerSheet, @_party_benchPlayer, @_party_unbenchPlayer

// Other global variables here

///////////////////////////////////////////////////////////////////////////////////////////////////
// Match item type to group type
def itemMatch(item, group)
  byte type

  type = item->t_type
  when group
    is TYPE_ALL
      return TRUE
      break
    is TYPE_EQUIP
      return type == TYPE_ARMOR or type == TYPE_WEAPON
    is TYPE_USE
      return type == TYPE_ITEM
      break
    is TYPE_DROP
    return type == TYPE_WEAPON or type == TYPE_ARMOR
      break
    otherwise
      return group == type
  wend
end
// Search item num
def itemNum(player, skip, num, select)
  word item

  item = player=>p_items
  while item and skip
    item = item=>p_nextObj
    skip--
  loop
  while item
    if itemMatch(item, select)
      if not num; return item; fin
      num--
    fin
    item = item=>p_nextObj
  loop
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Unequip item kind
def unequip(player, type, kind)
  word item

  item = player=>p_items
  while item
    if item->t_type == type
      if (streqi(item=>s_itemKind, kind) or type == TYPE_WEAPON) and item->b_flags & ITEM_FLAG_EQUIP
        item->b_flags = item->b_flags & ~ITEM_FLAG_EQUIP
        return item
      fin
    fin
    item = item=>p_nextObj
  loop
end
///////////////////////////////////////////////////////////////////////////////////////////////////
// Display inventory pane
def showInventory(player, page, rows, select)
  word item
  byte s_item, n_item, n_page

  s_item = 0
  n_item = 0
  n_page = page * rows
  item = player=>p_items
  setMapWindow()
  clearWindow()
  if page
    rawDisplayStr("^T008")
    displayf1("<%d", page)
  fin
  rawDisplayStr("^T040^LInventory^L")
  if countList(item) > n_page + rows
    rawDisplayStr("^T108")
    displayf1("%d>", page+2)
  fin
  rawDisplayStr("\n^T018")
  displayf1("Gold: %d", countGold())
  if page
    while item and n_item < n_page
      item = item=>p_nextObj
      n_item++
    loop
  fin
  while item and n_item < (n_page + rows)
    displayChar('\n')
    if itemMatch(item, select)
      displayf1("%c)", 'A' + s_item)
      s_item++
    fin
    rawDisplayStr("^T018")
    displayStr(item=>s_name)
    if item->t_type == TYPE_WEAPON or item->t_type == TYPE_ARMOR
      if item->b_flags & ITEM_FLAG_EQUIP
        displayStr(" *")
      fin
    fin
    n_item++
    item = item=>p_nextObj
  loop
  while n_item < (n_page + rows)
    displayChar('\n')
    n_item++
  loop
  return s_item
end
// Display skill value
def displaySkill(str, val, col)
  byte[16] mystr

  strncpy(@mystr, str, 15)
  mystr[1] = charToUpper(mystr[1])
  if col & 1
    rawDisplayStr("^T060")
  else
    displayChar('\n')
  fin
  displayf2("%d %s", val, @mystr)
end
// Show player data
def showPlayerSheet(num, i_page, i_rows)
  word player, skill, weapon, dmg
  byte col, n_item

  // Count the number of players
  player = global=>p_players
  while num > 0
    player = player=>p_nextObj
    if !player; return; fin // Not that many players
    num--
  loop

  // First, display the player's name in the title bar
  showMapName(player=>s_name)

  // Show stats in the right panel
  setWindow2()
  clearWindow()
  rawDisplayStr("^T040^LStats^L\n")
  rightJustifyNum(player=>w_health, CHAR_WND_STAT_X);       rawDisplayStr("^T036Health\n")
  rightJustifyNum(player->b_intelligence, CHAR_WND_STAT_X); rawDisplayStr("^T036Intelligence\n")
  rightJustifyNum(player->b_strength, CHAR_WND_STAT_X);     rawDisplayStr("^T036Strength\n")
  rightJustifyNum(player->b_agility, CHAR_WND_STAT_X);      rawDisplayStr("^T036Agility\n")
  rightJustifyNum(player->b_stamina, CHAR_WND_STAT_X);      rawDisplayStr("^T036Stamina\n")
  rightJustifyNum(player->b_charisma, CHAR_WND_STAT_X);     rawDisplayStr("^T036Charisma\n")
  rightJustifyNum(player->b_spirit, CHAR_WND_STAT_X);       rawDisplayStr("^T036Spirit\n")
  rightJustifyNum(player->b_luck, CHAR_WND_STAT_X);         rawDisplayStr("^T036Luck\n")
  rightJustifyNum(player->b_armor, CHAR_WND_STAT_X);        rawDisplayStr("^T036Armor\n")
  // Get weapon
  weapon = player=>p_items
  while weapon
    if weapon->t_type == TYPE_WEAPON and weapon->b_flags & ITEM_FLAG_EQUIP; break; fin
    weapon = weapon=>p_nextObj
  loop
  if weapon
    dmg = weapon=>r_projectileDmg
  else
    dmg = 0
  fin
  if dmg > 0
    displayf3("%dd%d+%d", (dmg >> 12) & $0F, (dmg >> 8) & $0F, dmg & $0F)
    rawDisplayStr("^T036Projectile")
  else
    if weapon
      dmg = weapon=>r_meleeDmg
    else
      dmg = $01400
    fin
    displayf3("%dd%d+%d", (dmg >> 12) & $0F, (dmg >> 8) & $0F, dmg & $0F)
    rawDisplayStr("^T036Melee")
  fin
  // Show aquired skills in lower right panel
  setWindow3()
  clearWindow()
  rawDisplayStr("^T040^LSkills^L")
  displaySkill("Aim", player->b_aiming, 0)
  displaySkill("Fists", player->b_handToHand, 1)
  displaySkill("Dodge", player->b_dodging, 0)
  col = 1
  skill = player=>p_skills
  while skill
    displaySkill(skill=>s_name, skill->w_modValue, col)
    skill = skill=>p_nextObj
    col++
  loop
  // Next, show inventory in the main panel
  showInventory(player, i_page, i_rows, 0)
  rawDisplayStr("\n^T012E)quip, U)se, D)rop")
  return player
end

// Show player sheet and accept command. If using an item (not just for stats gain)
// the item is returned; else NULL is returned.
def _party_doPlayerSheet(num)
  word player, item
  word hMap, vMap, i_rows
  byte n_item, i_page, i

  // Get size of inventory pane in chars
  getMapWindow(@hMap, @vMap)
  i_rows = (vMap / 9) - 3  // 9 rows per line; minus 3 lines for header/footer
  i_page = 0
  repeat
    player = showPlayerSheet(num, i_page, i_rows)
    if !player; return; fin // Invalid player
    // Get a key, do something
    when getUpperKey()
      // Select another player to show
      is '1'; num = 0; i_page = 0; break
      is '2'; num = 1; i_page = 0; break
      is '3'; num = 2; i_page = 0; break
      // Equip player with weapon/armor
      is 'E'
        if showInventory(player, i_page, i_rows, TYPE_EQUIP)
          rawDisplayStr("\n^T032Which item?")
          item = itemNum(player, i_rows * i_page, getUpperKey() - 'A', TYPE_EQUIP)
          if item
            if unequip(player, item->t_type, item=>s_itemKind) <> item
              item->b_flags = item->b_flags | ITEM_FLAG_EQUIP
              calcPlayerArmor(player)
            fin
          fin
        else
          beep
        fin
        break
      // Use an item
      is 'U'
        if showInventory(player, i_page, i_rows, TYPE_USE)
          rawDisplayStr("\n^T032Which item?")
          item = itemNum(player, i_rows * i_page, getUpperKey() - 'A', TYPE_USE)
          if item
            setWindow2()
            clearWindow()
            if item=>p_modifiers and streqi(item=>p_modifiers=>s_name, "health")
              if player=>w_health < player=>w_maxHealth
                player=>w_health = min(player=>w_health + item=>p_modifiers=>w_modValue, player=>w_maxHealth)
                item->b_curUses++
                if item->b_curUses >= item->b_maxUses // all used up
                  removeFromList(@player=>p_items, item)
                fin
              fin
            else
              return item // general 'use' handled by outer engine, because it might involve graphics
            fin
          fin
        else
          beep
        fin
        break
      // Drop an item
      is 'D'
        if showInventory(player, i_page, i_rows, TYPE_DROP)
          rawDisplayStr("\n^T032Which item?")
          n_item = getUpperKey() - 'A'
          item = itemNum(player, i_rows * i_page, n_item, TYPE_DROP)
          if item
            clearWindow()
            rawDisplayStr("^T050^LDrop^L\n")
            for i = 0 to n_item
              displayChar('\n')
            next
            rawDisplayStr("\n^T018")
            displayStr(item=>s_name)
            for i = n_item + 3 to i_rows
              displayChar('\n')
            next
            rawDisplayStr("\n^T008Are you sure (Y/N)?")
            if getYN()
              i = countList(player=>p_items)
              removeFromList(@player=>p_items, item)
              if countList(player=>p_items) <> i - 1
                displayStr("remove List error!")
                getUpperKey()
              fin
              calcPlayerArmor(player)
            fin
          fin
        else
          beep
        fin
        break
      // Next inventory page
      is '>'
        if countList(player=>p_items) > (i_page + 1) * i_rows
          i_page++
        fin
        break
      // Previous inventory page
      is '<'
        if i_page
          i_page--
        fin
        break
      // Other operations...
      is '&' // add health cheat
        if global->b_godmode
          player=>w_health = player=>w_health + 50
        fin
        break
      is '$' // add gold cheat
        if global->b_godmode
          addGold(500)
        fin
        break
      is '%' // add item cheat
        if global->b_godmode
          pGodModule=>godmode_addItem(player)
        fin
        break
      is '9' // add player cheat
        if global->b_godmode
          pGodModule=>godmode_addPlayer()
        fin
        break
      // All done
      otherwise return
    wend
    tossStrings() // Free up local strings
  until 0
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Display a list of NPCs and allow user to select one.
def selectPlayer(players)
  byte n_item
  word player

  // First, display the list
  player = players
  n_item = 0
  while player
    if player->b_playerFlags & PLAYER_FLAG_NPC
      displayf1("\n%c)", 'A' + n_item)
      rawDisplayStr("^T018")
      displayStr(player=>s_name)
      n_item++
    fin
    player = player=>p_nextObj
  loop

  if !n_item
    displayStr("No applicable characters.")
    return NULL
  fin

  // Then get a selection
  rawDisplayStr("\nWhich character?")
  n_item = getUpperKey() - 'A'
  player = players
  while player
    if player->b_playerFlags & PLAYER_FLAG_NPC
      if n_item == 0
        break
      fin
      n_item--
    fin
    player = player=>p_nextObj
  loop
  return player
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Allow user to select an active player, and put them on the bench
def _party_benchPlayer()
  word player
  player = selectPlayer(global=>p_players)
  if player
    removeFromList(@global=>p_players, player)
    addToList(@global=>p_benched, player)
    displayStr("\nDone.")
  fin
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Allow user to select a benched player, and put them on the bench
def _party_unbenchPlayer()
  word player
  if countList(global=>p_players) == MAX_PARTY
    displayStr("Party too large.")
    return
  fin
  player = selectPlayer(global=>p_benched)
  if player
    removeFromList(@global=>p_benched, player)
    addToList(@global=>p_players, player)
    displayStr("\nDone.")
  fin
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Boilerplate module initialization code
return @funcTbl
done
