///////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2017 The 8-Bit Bunch. Licensed under the Apache License, Version 1.1
// (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-1.1>.
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
// ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
//////////////////f/////////////////////////////////////////////////////////////////////////////////

include "gamelib.plh"
include "playtype.plh"
include "globalDefs.plh"
include "gen_modules.plh"
include "gen_items.plh"

const PAGE_SIZE = 19

// Exported functions go here. First a predef for each one, then a table with function pointers
// in the same order as the constants are defined in the header.
predef _buyFromStore, _sellToStore
word[] funcTbl = @_buyFromStore, @_sellToStore

word pItemsModule
const MAX_PAGE_ITEMS = 20 // should be plenty
word pageItems[MAX_PAGE_ITEMS]
word pagePrices[MAX_PAGE_ITEMS]

byte selStrBuf[2]

///////////////////////////////////////////////////////////////////////////////////////////////////
// Definitions used by assembly code
asm _defs
!convtab "../../include/hiBitAscii.ct"
!source "../../include/global.i"
!source "../../include/plasma.i"
!source "../../include/mem.i"
tmp         = $2
pTmp        = $4
ysav        = $34
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Multiply 16 bit number by 8-bit ratio, and drop lower 8 bits of result. In effect this scales
// num by the approximate ratio 0=0% .. 128=50% .. 255=99%
asm mulRatio    // params: num, ratio
  +asmPlasm 2
.ratio = evalStkL
.numL  = evalStkL+1
.numH  = evalStkH+1
.numHH = tmp
.accLL = tmp+1
.accL  = pTmp
.accH  = pTmp+1
  lda .ratio,x        ; save ratio
  ldy #0
  sty .numHH          ; zero what will become upper 8 bits of num
  sty .accLL          ; clear accumulation area
  sty .accL
  sty .accH
  ldy #8              ; loop over 8 bits of ratio
- lsr                 ; get next bit
  bcc +               ; skip add if clear
  pha
  clc
  lda .numL,x         ; 24-bit add
  adc .accLL
  sta .accLL
  lda .numH,x
  adc .accL
  sta .accL
  lda .numHH
  adc .accH
  sta .accH
  pla
+ asl .numL,x         ; shift number up
  rol .numH,x
  rol .numHH
  dey                 ; and loop again
  bne -
  ldy .accH           ; final result in Y/A
  lda .accL
  rts
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Calculate markup on a price, where ratio is an 8.8 fixed-point number. Some approx ratios:
// $0000 = 0%
// $0026 = 15%
// $0080 = 50%
// $0100 = 100%
// $0180 = 150%
def calcMarkup(price, ratio)
  word markup
  markup = 0
  while ratio > 255
    markup = markup + price
    ratio = ratio - 256
  loop
  return markup + mulRatio(price, ratio)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def loadItems()
  mmgr(START_LOAD, 1) // code is in partition 1
  pItemsModule = mmgr(QUEUE_LOAD, MOD_GEN_ITEMS<<8 | RES_TYPE_MODULE)
  mmgr(FINISH_LOAD, 0)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def unloadItems()
  mmgr(FREE_MEMORY, pItemsModule)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayBuyTitle()
  rawDisplayStr("^T108Buying\n\n")
  rawDisplayStr("^LSel^T025Price^T060Item^L")
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayBuyLine(num, name, price)
  word buf
  rawDisplayStr("\n")
  ^(@buf) = 1
  ^(@buf + 1) = num + 'A'
  rawDisplayStr(@buf)
  rawDisplayStr(".^T025")
  rawDisplayStr(convertDec(price))
  rawDisplayStr("^T060")
  rawDisplayStr(name)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayBuyPage(pItemFunc, markupRatio)
  byte itemNum
  itemNum = 0
  displayBuyTitle()
  mmgr(HEAP_COLLECT, 0)
  while itemNum < PAGE_SIZE-5
    pageItems[itemNum] = (*pItemFunc)()
    pagePrices[itemNum] = max(1, pageItems[itemNum]=>w_price + calcMarkup(pageItems[itemNum]=>w_price, markupRatio))
    if pageItems[itemNum]->t_type == TYPE_STUFF // show plural for countable stuff like ammo, pelts
      setPlural(TRUE)
    else
      setPlural(FALSE)
    fin
    displayBuyLine(itemNum, pageItems[itemNum]=>s_name, pagePrices[itemNum])
    itemNum++
    pItemFunc = pItemFunc + 2
    if !*pItemFunc; break; fin
  loop
  return itemNum
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _buyFromStore(storeCode, markupRatio)
  word pItemTbl, topItem, choice

  setOversizeWindow()
  clearWindow()

  loadItems()
  pItemTbl = pItemsModule()=>items_forStoreCode(storeCode)
  topItem = pItemTbl

  while TRUE
    displayBuyPage(topItem, markupRatio)
    rawDisplayStr("\n\nSelect item, Return for next pg, Esc to leave")
    choice = readStr()
    break
  loop
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _sellToStore(storeCode, markdownRatio)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Boilerplate module initialization code
return @funcTbl
done
