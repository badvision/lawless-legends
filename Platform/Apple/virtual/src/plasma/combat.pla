///////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2015 The 8-Bit Bunch. Licensed under the Apache License, Version 1.1
// (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-1.1>.
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
// ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////

include "gamelib.plh"
include "globalDefs.plh"
include "playtype.plh"
include "gen_images.plh"
include "gen_enemies.plh"
include "gen_modules.plh"
include "combat.plh"

predef _combat_zoneEncounter(s_encZone)#1
word[] funcTbl = @_combat_zoneEncounter

// Combat variables that don't need to be saved in game state
byte nPlayersFighting
byte nEnemiesFighting
byte isFleeing

///////////////////////////////////////////////////////////////////////////////////////////////////
def canFight(p)#1
  return p=>w_health > 0
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def chooseEnemy(maxDist)#1
  word p
  byte n

  // TODO: Consider distance of enemies
  n = rand16() % nEnemiesFighting
  p = global=>p_combatFirst
  while TRUE
    if p->t_type == TYPE_ENEMY and canFight(p)
      if n == 0; return p; fin
      n = n - 1
    fin
    p = p=>p_combatNext
  loop
  return NULL
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def playerMelee(pPlayer, pWeapon)#1
  word pEnemy, dmg
  pEnemy = chooseEnemy(5)  // max distance 5 feet for melee
  if !pEnemy; return FALSE; fin
  if pWeapon
    dmg = rollDice(pWeapon=>r_meleeDmg)
  else
    dmg = (rand16() % 4) + pPlayer->b_handToHand   // default to 1d4 for fists
  fin
  // TODO: Add extra melee damage for skills, strength, etc.
  // TODO: consider enemy dodge
  // TODO: consider enemy armor and bonuses
  pEnemy=>w_health = pEnemy=>w_health - dmg

  buildString(@addToString)
  printf3("\n%s pummels %s for %d damage.", pPlayer=>s_name, pEnemy=>s_name, dmg)
  if pEnemy=>w_health <= 0
    printf1(" %s is killed!", pEnemy=>s_name)
    nEnemiesFighting = nEnemiesFighting - 1
  fin
  puts("\n")
  displayStr(finishString(0))

  return TRUE
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def playerShoot(pPlayer, pWeapon)#1
  word pEnemy, pSkill, dmg
  word chance
  byte roll

  pEnemy = chooseEnemy(pWeapon->b_weaponRange)
  if !pEnemy; return FALSE; fin

  // Figure out chance to hit. First come agility and aim.
  // TODO: check for and add weapon bonuses for agility and aiming
  chance = (pPlayer->b_agility * 4) + pPlayer->b_aiming

  // Add in skill modifier, if any
  pSkill = pPlayer=>p_skills
  while pSkill
    if pSkill=>s_name == pWeapon=>s_itemKind
      chance = chance + pSkill=>w_modValue
    fin
    pSkill = pSkill=>p_nextObj
  loop

  // Nobody can have 100% chance to hit. Let's cap it at 90%.
  chance = min(90, chance)

  roll = rand16() % 100
  if roll >= chance

    // Miss!
    displayf2("\n%s shoots at %s but misses.\n", pPlayer=>s_name, pEnemy=>s_name)
    return FALSE
  fin

  // TODO: consider multi-shot weapons
  dmg = rollDice(pWeapon=>r_projectileDmg)
  // TODO: Add extra melee damage for skills, strength, etc.
  // TODO: consider enemy dodge
  // TODO: consider enemy armor, and armor bonuses
  pEnemy=>w_health = pEnemy=>w_health - dmg

  buildString(@addToString)
  printf3("\n%s shoots %s for %d damage.", pPlayer=>s_name, pEnemy=>s_name, dmg)
  if pEnemy=>w_health <= 0
    printf1(" %s is killed!", pEnemy=>s_name)
    nEnemiesFighting = nEnemiesFighting - 1
  fin
  puts("\n")
  displayStr(finishString(0))

  return TRUE
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def playerDodge(pPlayer)#0
  displayf1("\n%s dodges.\n", pPlayer=>s_name)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def chooseWeapon(player)#0
  displayStr("\nTODO: choose weapon\n")
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def combatPause()#0
  pause(800)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayOpponents()#0
  word p
  byte count, first
  byte isPlural

  buildString(@addToString)
  puts("\nYou face ")
  first = TRUE
  p = global=>p_enemyGroups
  while p
    if !first
      if p=>p_nextObj
        puts(", ")
      else
        puts(" and ")
      fin
    fin
    first = FALSE
    count = countListFiltered(p=>p_enemies, p_nextObj, @canFight)
    isPlural = (count <> 1)
    if (p=>p_enemies=>r_groupSize == 0)
      printf2("%s at %d'", p=>p_enemies=>s_name, p->b_enemyGroupRange)
    else
      printf3("%d %s at %d'", count, p=>p_enemies=>s_name, p->b_enemyGroupRange)
    fin
    p = p=>p_nextObj
  loop
  puts(".\n")
  displayStr(finishString(isPlural))
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def displayOption(key, str)#0
  buildString(@addToString)
  printf2("\n  (%c)^T033%s ", key, str)
  rawDisplayStr(finishString(0))
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def playerCombatChoose(pl)#0
  word p, pWeapon
  byte nWeapons, key
  byte canShoot, canReload, canChange

  // Count all weapons and get currently equipped
  canShoot  = FALSE
  canReload = FALSE
  canChange = FALSE
  nWeapons  = 0
  pWeapon   = NULL
  p = pl=>p_items
  while p
    if p->t_type == TYPE_WEAPON
      if p->b_flags & ITEM_FLAG_EQUIP; pWeapon = p; fin
      //nWeapons++ Comment this back in to allow weapon changing
    fin
    p = p=>p_nextObj
  loop
  // NPCs always melee for now
  if pl->b_playerFlags & PLAYER_FLAG_NPC
    pl->b_combatChoice = 'M'
    return
  fin

  // Tell what the player currently faces
  displayOpponents()
  combatPause()

  // Let them know their options
  displayStr("\n")
  callGlobalFunc(GS_COMBAT_PROMPT, 0, 0, 0)
  displayOption('M', "Melee")
  if pWeapon
    if pWeapon->b_clipCurrent
      canShoot = TRUE
      displayOption('S', "Shoot")
    fin
    if pWeapon->b_clipCurrent < pWeapon->b_clipSize
      // TODO: Need to check for enough ammo, and use it up.
      canReload = TRUE
      displayOption('R', "Reload")
    fin
    if nWeapons >= 2
      canChange = TRUE
      displayOption('C', "Chg weapon")
    fin
  fin
  displayOption('D', "Dodge")
  displayOption('F', "Flee")

  while TRUE
    pl->b_combatChoice = getUpperKey()
    displayStr("\n")
    when pl->b_combatChoice
      is 'M'
        return
      is 'F'
        isFleeing = TRUE
        return
      is 'D'
        return
      is 'S'
        if canShoot; return; fin
        break
      is 'R'
        if canReload; return; fin
        break
      is 'C'
        if canChange; return; fin
        break
    wend
    beep()
  loop
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def playerCombatTurn(pl)#0
  word pWeapon

  // Get weapon
  pWeapon = pl=>p_items
  while pWeapon
    if pWeapon->t_type == TYPE_WEAPON and pWeapon->b_flags & ITEM_FLAG_EQUIP; break; fin
    pWeapon = pWeapon=>p_nextObj
  loop

  // Execute the player's choice
  when pl->b_combatChoice
    is 'M'
      playerMelee(pl, pWeapon)
      break
    is 'F'
      break
    is 'D'
      playerDodge(pl)
      break
    is 'S'
      playerShoot(pl, pWeapon)
      break
    is 'R'
      pWeapon->b_clipCurrent = pWeapon->b_clipSize
      setPlural(FALSE)
      displayf1("%s has reloaded.\n", pl=>s_name)
      break
    is 'C'
      // Change to next weapon in inventory
      pWeapon->b_flags = pWeapon->b_flags & ~ITEM_FLAG_EQUIP
      repeat
        pWeapon = pWeapon=>p_nextObj
        if not pWeapon; pWeapon = pl=>p_items; fin
      until pWeapon->t_type == TYPE_WEAPON
      pWeapon->b_flags = pWeapon->b_flags | ITEM_FLAG_EQUIP
      setPlural(FALSE)
      displayf2("%s changed to using %s.\n", pl=>s_name, pWeapon=>s_name)
      break
  wend
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def enemyCombatTurn(pe)#1
  word pl
  byte roll, dam, needShow

  // Choose a target
  pl = randomFromListFiltered(global=>p_players, p_nextObj, @canFight)
  if !pl; return FALSE; fin

  buildString(@addToString)
  printf3("\n%s %s %s ", pe=>s_name, pe=>s_attackText, pl=>s_name)

  // Roll to hit
  roll = rand16() % 100
  // TODO: consider player dodge
  // TODO: consider player agility
  // TODO: consider player skills
  needShow = FALSE
  if roll <= pe->b_chanceToHit
    dam = rollDice(pe=>r_enemyDmg)
    printf1("and hits for %d damage!", dam)
    pl=>w_health = max(0, pl=>w_health - dam)
    if pl=>w_health == 0
      printf1(" %s is killed!", pl=>s_name)
    fin
    needShow = TRUE
  else
    puts("and misses.")
  fin
  puts("\n")

  displayStr(finishString(0))
  if needShow; showParty(); fin
  return TRUE
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def combatInsert(toAdd)#0
  word p, pPrev

  // Find the proper position based on combat order number (keep largest first in the list)
  pPrev = @global=>p_combatFirst
  while TRUE
    p = *pPrev
    if !p or p->b_combatOrder < toAdd->b_combatOrder
      break
    fin
    pPrev = p + p_combatNext
  loop

  // Add it right there.
  toAdd=>p_combatNext = *pPrev
  *pPrev = toAdd
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def determineCombatOrder()#0
  word p, p2

  nPlayersFighting = 0
  nEnemiesFighting = 0

  // Do each player character, with random chance based on their agility
  global=>p_combatFirst = NULL
  p = global=>p_players
  while p
    if canFight(p)
      p->b_combatOrder = rand16() % (p->b_agility * 10)
      combatInsert(p)
      if (!(p->b_playerFlags & PLAYER_FLAG_NPC)) // only count real players
        nPlayersFighting = nPlayersFighting + 1
      fin
    fin
    p = p=>p_nextObj
  loop

  // Then all the enemies, with random chance based on their chance to hit.
  p = global=>p_enemyGroups
  while p
    p2 = p=>p_enemies
    while p2
      if canFight(p2)
        p2->b_combatOrder = rand16() % p2->b_chanceToHit
        combatInsert(p2)
        nEnemiesFighting = nEnemiesFighting + 1
      fin
      p2 = p2=>p_nextObj
    loop
    p = p=>p_nextObj
  loop
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def makeEnemyGroup(enemyFunc)#1
  word p, enem, groupSize
  p = mmgr(HEAP_ALLOC, TYPE_ENEMY_GROUP)
  enem = enemyFunc()
  p->b_enemyGroupRange = max(1, rand16() % (enem->b_enemyAttackRange))
  if enem=>r_groupSize == 0  // handle unique enemies
    groupSize = 1
  else
    groupSize = rollDice(enem=>r_groupSize)
  fin
  addToList(p + p_enemies, enem)
  while groupSize > 1
    addToList(p + p_enemies, enemyFunc())
    groupSize = groupSize - 1
  loop

  return p
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def makeRandomGroup(mapCode)#0
  word enemiesModule
  word enemyFunc

  enemiesModule = mmgr(QUEUE_LOAD, MOD_GEN_ENEMIES<<8 | RES_TYPE_MODULE)
  mmgr(FINISH_LOAD, 0)

  global=>p_enemyGroups = NULL
  enemyFunc = randomFromArray(enemiesModule()=>enemies_forZone(mapCode))
  addToList(@global=>p_enemyGroups, makeEnemyGroup(enemyFunc))

  mmgr(FREE_MEMORY, enemiesModule)
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def collectLoot()#1
  word group, enemies, gold

  gold = 0
  group = global=>p_enemyGroups
  while group
    enemies = group=>p_enemies
    while enemies
      gold = gold + rollDice(enemies=>r_goldLoot)
      enemies = enemies=>p_nextObj
    loop
    group = group=>p_nextObj
  loop
  return gold
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def startCombat(mapCode)#1
  word p, p2, n, s

  // Setup
  isFleeing = FALSE
  makeRandomGroup(mapCode)

  // Display portrait of first group
  setPortrait(global=>p_enemyGroups=>p_enemies->b_image)

  // Clear keyboard stobe, because while wandering the map, the player may have
  // queued up movement keys, which are made obsolete by the surprise of combat.
  ^kbdStrobe

  // We're going to do all our text drawing in window 2. Also, might as well
  // set everything up so that the map gets redrawn when combat finishes.
  setWindow2()
  clearWindow()

  // General intro to the combat situation
  callGlobalFunc(GS_COMBAT_INTRO, 0, 0, 0)

  // Say who we're fighting
  p = global=>p_enemyGroups
  while p
    n = countList(p=>p_enemies)
    setPlural(n <> 1)
    s = callGlobalFunc(GS_ENEMY_INTRO, 0, 0, 0)
    displayf2(s, n, p=>p_enemies=>s_name)
    p = p=>p_nextObj
  loop

  rawDisplayStr("\n\nDo you:\n")
  displayOption('B', "Battle")
  displayOption('F', "Flee")
  while TRUE
    n = getUpperKey()
    if n == 'B'
      displayStr("\n\nBattle! \n")
      return 1
    elsif n == 'F'
      displayStr("\n\nFleeing... \n")
      return 0
    // Secret option for testing: just die
    elsif n == '#' and global->b_godmode
      displayStr("\n\n")
      return 99
    elsif n == '*' and global->b_godmode
      displayStr("\n\n")
      return -99
    fin
    beep()
  loop

  return 0 // just to keep compiler happy
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// For cheating in god mode, kill all enemies. This is better than just setting nEnemiesFighting
// to zero, because we'll still get loot.
def killAllEnemies()#0
  word pGroup, pEnemy
  pGroup = global=>p_enemyGroups
  // For every group...
  while pGroup
    pEnemy = pGroup=>p_enemies
    // For every enemy in the group...
    while pEnemy
      pEnemy=>w_health = 0 // kill em
      pEnemy = pEnemy=>p_nextObj
    loop
    pGroup = pGroup=>p_nextObj
  loop

  // Update nEnemiesFighting
  determineCombatOrder()
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Returns: zero if fled, non-zero if won
def _combat_zoneEncounter(s_encZone)#1
  word p, l, answer

  // Show portrait and threat details, find out if player wants to fight (vs. run)
  answer = startCombat(s_encZone)
  if answer == 99
    killAllEnemies()
  elsif answer == -99
    return answer // special code for death
  elsif !answer
    isFleeing = TRUE
  fin

  // Do each round of combat until player wins, loses, or flees
  while TRUE
    p = global=>p_players
    while p
      if canFight(p) and nEnemiesFighting and !isFleeing
        playerCombatChoose(p)
      fin
      p = p=>p_nextObj
    loop

    determineCombatOrder()

    p = global=>p_combatFirst
    while p
      if !nPlayersFighting
        return -99  // special code for death
      elsif !nEnemiesFighting
        callGlobalFunc(GS_COMBAT_WIN, 0, 0, 0)
	      // Grab the loot
	      displayf1("You find %d gold pieces!", addGold(collectLoot()))
        getUpperKey()
        // Note: no need to clear heap -- the caller does that.
        return 1
      fin

      if canFight(p)
        when p->t_type
          is TYPE_PLAYER
            if isFleeing
              displayStr("\nYou have fled.")
              // Note: no need to clear heap -- the caller does that.
              return 0
            fin
            playerCombatTurn(p)
            combatPause()
            break
          is TYPE_ENEMY
            if enemyCombatTurn(p); combatPause(); fin
            break
          otherwise
            brk()
        wend
      fin
      p = p=>p_combatNext
    loop
  loop
  return 0 // keep compiler happy
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// initialization code

return @funcTbl
done
