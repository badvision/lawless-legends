///////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2015 The 8-Bit Bunch. Licensed under the Apache License, Version 1.1
// (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-1.1>.
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
// ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////

include "gamelib.plh"
include "globalDefs.plh"
include "playtype.plh"
include "diskops.plh"
include "gen_modules.plh"
include "gen_players.plh"

// This pointer is the root of all heap-tracked (and garbage collected) objects.
// See playtype.plh for definitions of all the datastructures and how they interconnect.
word global

// Exported functions go here. First a predef for each one, then a table with function pointers
// in the same order as the constants are defined in the the header.
predef _saveGame, _loadGame, _newOrLoadGame
word[] funcTbl = @_saveGame, @_loadGame, @_newOrLoadGame

byte[] game1_filename = "GAME.1.SAVE"

///////////////////////////////////////////////////////////////////////////////////////////////////
// Definitions used by assembly code
asm __defs

; Use hi-bit ASCII for Apple II
!convtab "../../include/hiBitAscii.ct"

; Headers
!source "../../include/global.i"
!source "../../include/plasma.i"
!source "../../include/mem.i"

; Optional debug printing support
DEBUG   = 0

; General use
tmp         = $2
pTmp        = $4

end

def copyHeap(dir)
  fatal("TODO: reimpl with copyMem")
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _saveGame()

  // Perform garbage collection and record the size of the heap so we can restore it correctly
  global=>w_heapSize = mmgr(HEAP_COLLECT, 0) - HEAP_BOTTOM

  // Copy data to main memory
  showMapName("Saving game...")
  copyHeap(0)  // LC to low mem

  // Open the file if it already exists...
  //open_filename = @game1_filename
  //open_buffer = $5C00
  //if callMLI(MLI_OPEN, @open_params) > 0
    //create_filename = open_filename
    //create_accessbits = $C3  // full access
    //create_filetype = $F1 // user type 1
    //create_auxtype = 0
    //create_storagetype = 1
    //create_date = 0
    //create_time = 0
    //guaranteeMLI(MLI_CREATE, @create_params)
    //guaranteeMLI(MLI_OPEN, @open_params)
  //fin

  // Write the game data to it
  //write_fileref = open_fileref
  //write_addr = $5000
  //write_length = HEAP_SIZE
  //guaranteeMLI(MLI_WRITE, @write_params)

  // All done.
  //close_fileref = open_fileref
  //guaranteeMLI(MLI_CLOSE, @close_params)
end

def loadInternal()
  word p_loaded

  // Open the file. If that fails, return FALSE (instead of halting)
  //open_filename = @game1_filename
  //open_buffer = $5C00
  //if callMLI(MLI_OPEN, @open_params) > 0; return FALSE; fin

  // Read the game data from it
  //read_fileref = open_fileref
  //read_addr = $5000
  //read_length = HEAP_SIZE
  //guaranteeMLI(MLI_READ, @read_params)

  // All done with the file
  //close_fileref = open_fileref
  //guaranteeMLI(MLI_CLOSE, @close_params)

  // Copy the heap up, and init it with the correct size.
  p_loaded = $5000
  if p_loaded=>w_heapSize < 100 or p_loaded=>w_heapSize > HEAP_SIZE
    fatal("Corrupt game file.")
  fin
  copyHeap(1)  // low mem to LC
  initHeap(p_loaded=>w_heapSize)
  global = getGlobals()
  return TRUE
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _loadGame()
  setMapWindow()
  clearWindow()
  showMapName("Loading game...")

  // Open the file
  ^$4000 = 0  // so 3D engine knows we overwrite HGR page 2, even if we fail
  if !loadInternal()
    showMapName("Not found.")
    getUpperKey()
  fin
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def newGame()
  word playersModule, newGameModule
  initHeap(0) // initially empty heap
  global = getGlobals()
  global->b_curAvatar = 0
  playersModule = mmgr(QUEUE_LOAD, MOD_GEN_PLAYERS<<8 | RES_TYPE_MODULE)
  newGameModule = mmgr(QUEUE_LOAD, MOD_GS_NEW_GAME<<8 | RES_TYPE_MODULE)
  mmgr(FINISH_LOAD, 0)
  playersModule()=>makeInitialParty()
  newGameModule()()
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def gameExists()
  return FALSE // FIXME
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def _newOrLoadGame(ask)
  byte key

  if !gameExists()
    newGame(); return 1
  fin

  if !ask
    loadInternal()
    return 0
  fin

  textHome()
  ^$c053
  ^$25 = 20
  puts("\n    N)ew game, or L)oad last game? ")

  while TRUE
    key = getUpperKey()
    if key == 'N'
      ^$c052
      newGame()
      return 1
    elsif key == 'L'
      ^$c052
      if loadInternal()
        return 0
      fin
    fin
    beep()
  loop
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Boilerplate module initialization code
global = getGlobals()
return @funcTbl
done
