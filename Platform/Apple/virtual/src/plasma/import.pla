///////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2022 The 8-Bit Bunch. Licensed under the Apache License, Version 1.1
// (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-1.1>.
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
// ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////

include "gamelib.plh"
include "globalDefs.plh"
include "playtype.plh"
include "diskops.plh"

// Exported functions go here. First a predef for each one, then a table with function pointers
// in the same order as the constants are defined in the the header.
predef _getGame(pDiskOps)#1
word[] funcTbl = @_getGame

word pDiskOps

byte[] legendos_filename = "LEGENDOS.SYSTEM"

///////////////////////////////////////////////////////////////////////////////////////////////////
// Definitions used by assembly code
asm __defs

; Use hi-bit ASCII for Apple II
!convtab "../../include/hiBitAscii.ct"

; Headers
!source "../../include/global.i"
!source "../../include/plasma.i"
!source "../../include/mem.i"
!source "../../include/prorwts.i"

; General use
tmp         = $2
pTmp        = $4

end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Set up the font engine
asm fooFunc(param)#0
  +asmPlasmNoRet 1
  rts
end

///////////////////////////////////////////////////////////////////////////////////////////////////
def reinsert()#0
  while TRUE
    puts(" Re-insert disk 1")
    pDiskOps=>diskops_pressAnyKey()
    if callProRWTS(RWTS_READ | RWTS_OPENDIR, @legendos_filename, LOAD_SAVE_BUF, 512) == 0
      break
    fin
    puts("\n   ")
    beep()
  loop
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Load and display the title screen, set up everything in memory
def _getGame(_pDiskOps)#1
  pDiskOps = _pDiskOps

  // See if there's a Nox game in drive 2.
  ^$c051
  puts("Insert nox")
  pDiskOps=>diskops_pressAnyKey()
  if callProRWTS(RWTS_READ | RWTS_OPENDIR, "NA", LOAD_SAVE_BUF, 512) == 0
    puts("First open succeeded")
    rdkey()
    if callProRWTS(RWTS_READ | RWTS_READDIR, "DATA.SAVE.GAME1", LOAD_SAVE_BUF, 512) == 0
      puts("Second open succeeded")
    else
      puts("Second open failed")
    fin
  else
    puts("First open failed")
  fin
  rdkey
  ^$c050

  // Old code
  textHome
  ^$c053
  ^$25 = 20
  puts("\n    Insert disk for import")
  pDiskOps=>diskops_pressAnyKey()
  if pDiskOps=>diskops_gameExists()
    pDiskOps=>diskops_loadInternal()
    ^$25 = 20
    puts("\n    Game imported.")
    reinsert()
    memcpy(HEAP_BOTTOM, LOAD_SAVE_BUF, HEAP_SIZE, 0)  // LC to low mem
    rwGame(RWTS_WRITE)
    return TRUE
  fin
  puts("\n    Not found.")
  reinsert()
  return FALSE
end

///////////////////////////////////////////////////////////////////////////////////////////////////
// Boilerplate module initialization code
return @funcTbl
done
